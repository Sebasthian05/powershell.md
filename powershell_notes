GetEvery command has verb and noun in syntax
Verbs -> get, set, remove
Nouns ->

Help Powershell commands 
get-command
get-verb
get-command -verb get
get-command -noun service
get-service
Powershell is not case-sensitive

cls to clear string

get-Eventlog -LogName Security -ComputerName

if filtering for word with a space in it you have to use "" 

you can use windows commands for powershell but cannot run powershell commands on windows
check alias for other commands 

key F5 runs entire line and F8 runs line section

Get-Help Get-Process ### shows how to write a cmdlet and what it does ### add -Full to get everything 
System.string = string
update-help -Force -ErrorAction silentlycontinue (runs through ErrorAction and silently continues)

get-help *log* looks for all commands with logs in them 
get-help -Examples get-process
get_help about_* shows all help files of cmdlets to get more information on what they do 
get-help get-process


Mandatory vs. Optional
if a command is optional it means you DO NOT have to put it in the syntax of the powershell lines, you can tell if a parameter is optional if you see square brackets around them []
if you don't mention the option it will default to what is in the get-help syntax by order 

get-childitem -path c:\windows -filter *.exe -recurse -name ### get-childitem looks in the directory of c:\windows and finds the name of exectables 

Alias commands 
$Alias:dir list directory in list format ###sets dir as a name to  
-$Alias:ls list directories in list format, is the same as dir
get-alias -Definition get-childitem ###shows all current alias you've made
set-Alias edit notepad.exe ###set-Alias formats by <name> <command>
get-alias -name edit ###sets the alias
remove-item alias:edit ### how to remove an alias

properties: information of the object 
methods: what can the object do

get-host ### gets version of powershell 

Alias are not persistent throughout shells (if you close your session you could not use it on a new one)

(Get-Process).ProcessName ### (Get-Process <processname>).prosessname()

get-process | get-member
where you can pull out properties and methods 
 
get-service | format-table Name, Status ### gets services andd formats it by name and status 

Prorperties can be formatted by the format command EX: format-table Name, Status

write-host doesn't put its output on the pipeline 
write-output puts it output in a pipeline

function
{
write-host "1"
write-host "8"
write-host "4"
write-host "6"
}

Function
{
write-output "1"
write-output "8"
write-output "4"
write-output "6"
}

Get-Variable
$HOME

in powershell you need the dollar sign in order to create variable
$a = 10
you can check if the variable is good by:

get-variable a 
a      10

or 

get-childitem variable:a

to test if variable is there Test-Path variable:a ### test path give confirmation if a variable is assigned or not 
True 

single quotes will put the literal string of the words in them write-host 'hello $var' prints hello var
double wuotes will account for variables in string

to set a list of numbers do 
$var = Get-Random -minimum 1 -maximum #


Arrays 
Arrays are listed by index
(get-process)-getType()
$proc = Get-Process
to find how much is in an object .count or .length
how to test for an array $<Array> -is [array]
how to test for other items [int],[string]
$array = 1..25 creates a list from 1 to 25 incrementing by one all the way up to 25
$array2 = "Hello", "world", $, 10, (get-type)
($array2[3]).GetType() shows what type the index specified is 

$array[$array.count-1] last count
(-4..10)[4]
>> 0
$array[4,0,1,2]
5
1
2
3

how to get help from arrays
get-help *array*
or
get-help about_array

jaggaed array is a nested array, an array within a array
$jagedarray = "joe", "jim", "jan" (1, ('apple', 'pear') 3), "jay" ### anytihng with parantheses is an array
$a = 1,2,3
$a += @(4,5,6)  ### means array, += means appending to array
$a += , @(7,8,9) ### the comma adds a nested array in the array mentioned 
you can specify how many strings you went in an array with *
EX 'BOOM' * 5 will print BOOM five times in an array

$targetingArray = @(
(35.73 , 51.33, "Terhran"),
(39.90, 116.40, "Bejing"),
(39.07, 125.81, "Pyongyang"),
(33.51, 36.27, "Damascus")
)

for each ($line in $targetingArray) {if ($line[-1] -eq "Bejing'){ write-output $line } ]

how to write a script block
$myblock = { get-services | format-table name, service }
& $myblock

prints services in table format with only name and service

$a = 1 
$c = {1 + 1}
$a += &$c

$a = 3

Sort
get-childitem | sort-object ### sorts list in alphabetical order
get-childitem | sort-object -descending ### sorts in descending order
get-childitem | sort-object -property length -descending ###sorts object by length from highest to low
sort is short for sort-object
-property is just file size 


Get-Service | Group-Object status ###groups based off status running/stopped
Get-ChildItem | Group-Object ${_.length -lt -1kb} ###it is a pipeline variable, whatever is being passed through the pipeline (in this case the output of childitem and getting the length of files less than 1Kb)
1, 3, 5, 8, 2, 10 | Sort-Object ###sorts by numerical order

like and match
-Like can use wildcards **
-match is more for regex (pattern matching)
-equal cannot use wildcards **

Add Member ScriptMethod adds methods to the property


foreach ($line in $targetingArray){
    if ($line[-1] -eq 'Bejing'){ 
        write-output $line 
    } 
}

Random number pulling array  
$ARRAY = "@( &{(Get-Random -Minimum -10 -Maximum 0)..(Get-Random -Minimum 1 -Maximum 20)} )"



$myblock = { get-services | format-table name, service }


$a = 1 
$c = {1 + 1}
$a += &$c

Get-Service | Group-Object status ###groups based off status running/stopped
Get-ChildItem | Group-Object ${_.length -lt -1kb} ###it is a pipeline variable, whatever is being passed through the pipeline (in this case the output of childitem and getting the length of files less than 1Kb)
1, 3, 5, 8, 2, 10 | Sort-Object ###sorts by numerical order 
'1', '3', "5", '8', "2", '10' | Sort-Object ###sorts by numerical order ???

1..10 | Sort-Object -Property { Get-Random } ###creates a list 1-10 and sorts randomly 
Get-Process | Select-Object -First 10 ###grabs first 10 process
Get-Process | Format-Table name, id
Get-Process | Select-Object name, id 
Get-Process | Get-Member ### shows options for commands 
get-Process | Select-Object name, id, Description ###runs commands from the get-member object
Get-Process | Select-Object -ExpandProperty name ### Expands only the name
Get-Service | Where-Object {$_.Status -eq 'running'} ### shows object 

###you can create transcripts and .ps1 files from powershell

Get-ChildItem *.txt | where-object {$_.Length -lt 100} ###
Get-ChildItem *.dll | where-object {$_.Length -gt 100} ###
Get-Process | where {$.name -like "*powershell*"} | Format-Table name, Description ###gives us a process where the name is like powershell
Get-Process | where {$.name -eq "idle"} | Format-Table name, Description ###finds a process where the name matches idle equally
1,2,3,1,2,3,1,2,3 | sort-object | Get-Unique ###sorts from least to greatest and grabs unique only variables """NOTE THAT YOU HAVE TO SORT BEFORE YOU GET UNIQUE"""
Get-ChildItem | Measure-Object -Property length ### its Measuring how many items are in C:\Windows\system32
Get-ChildItem | Measure-Object -Property length -Average -Maximum -Minimum -sum ### its Measuring how many items are in C:\Windows\system32 by -Average
(Get-ChildItem).count###counts how many items are in the result 

'i bet you all cant wait to graduate' > test.txt
$before = Get-ChildItem
'4' > test.txt
$after = gci
Compare-Object $before $after -Property length, name ###compares the length before and after changing the test.txt

$MyTruck = New-Object object
###add a property to a member
Add-Member -MemberType NoteProperty -Name Color -Value Black -InputObject $MyTruck ### puts a noteproperty with the name color and the value black in $myTruck
Add-Member -me NoteProperty -in $MyTruck -na Make -va Ford ###short-handed version that does the same above
$MyTruck | Add-Member NoteProperty -Name Model -Value F150 ### adds property through pipeline
Add-Member -MemberType ScriptMethod -in $MyTruck -na Drive -va { "going for a roadtrip" } ### how to add a method to an object
$MyTruck | Add-Member scriptMethod -name Park -Value { "finding a spot" } ###same as above but with pipe
$MyTruck | Add-Member scriptMethod stop { "coming to a stop" } ### same as above but no commands to specify name and value 

#PSCustomObject
$Marine = [PSCustomObject]@{
    "FirstName" = "joe"
    "LastName"  = "Schmukatelly"
    "MilitaryRank" = "SSGT"
    "MOS" = "1721"
    "Position" = "CyberDefensiveOperator"
    }


$compinfo = Get-WmiObject win32_computerSystem
$osinfo = Get-WmiObject win32_OperatingSystem
$biosinfo = Get-WmiObject Win32_BIOS
$diskinfo = Get-WmiObject win32_logicalDisk

$myObject = New-Object psobject

$myObject | Add-Member -MemberType NoteProperty -Name ComputerName -Value $compinfo.Name
$myObject | Add-Member -MemberType NoteProperty -Name OperatingSystem -Value $osinfo.Caption
$myObject | Add-Member -MemberType NoteProperty -Name Version -Value $osinfo.Version
$myObject | Add-Member -MemberType NoteProperty -Name Manufacturer -Value $biosinfo.Manufacturer
$myObject | Add-Member -MemberType NoteProperty -Name Disks -Value $diskinfo._path

###psproviders allow you to interact with certain parts of the system through powershell

new-psdrive -name HKU -psprovider registry -root -HKEY_USERS ###creates a psdriver in the 

New-PSDrive -name Z -PSProvider FileSystem -Root \\live.sysinternals.com\tools
start-service -name webclient ###SYSINTERNALS IN OS (temp file drive)

Comparison operators
-eq equal
-lt less than
-gt greater than
-le less than or equal to
-ge greater than or equal to
-ne not equals
-contains  
-match regex expression
-like both sides of the expression are identical
-in returns true if values in collection
-replace replaces a string pattern
-is see if both objects are same type

### IF VALUE EQ RETURNS TRUE, IF VALUE EQUALS ONLY ONE RETURNS VALUE ex: 1,2,3 -EQ 2 -> 2 REVERSE FOR NOT EQ (NE)

### CONTAINS
$FRUIT = 'APPLE', 'ORANGE', 'PEAR', 'TOMATO'
$FRUIT -contains 'TOMATO' ->
### YOU CAN USE [] TO TEST RANGE OF CHARACTERS [A-Z]INKY

#Combo Compare
$num = 5
(($NUM -gt 1) -and ($num -lt 10)) ### -and compares two comparison operators 

IF STATEMENT
IF CONDITION IS MET EXECUTE CODE
EX

#IF

$X = 11
if($X -gt 10){"$X is larger than 10"}
$Y = 4
if ($Y -le 9) {
    write-host "$Y is not equal to 9, in fact its smaller" -ForegroundColor grey
}

#IFELSE
if("ABC" -eq "ABC"){
    Write-Host "Example 1 - Condition satisfied" -ForegroundColor Green
}
else {
    Write-Host "Example 1 - Condition NOT satisfied" -ForegroundColor Red
}

$fruit = "c"
switch($fruit) {
    a {"apple"}
    b {"banana"}
    c {"cherry"}
}


$nums = 1,2,3,4,5
$nums | ForEach-Object{$_ * 2}
$list | = 'a', 'b', 'c'
$list | foreach {$_.ToUpper()}
Get-ChildItem | ForEach-Object {$_.length / 1kb}
 #forEach  
foreach ($item in gci c:\ -Recurse){$item.name}

foreach ($item in 1..5){$item * 2}

#foreach array
$teams = @("tiger", "pistons", "Red Wings", "Lions")
foreach ($team in $teams){Detroit $team}

$num = 0
while ($num -lt 3) {
    $num
    $num++
}


$num = 0
do {
    $num
    $num++
}while($num -lt 3)

#dountil
$num = 0
do {
    $num
    $num++
}until($num -gt 3)

#for loop
for($num = 1; $num -le 3; $num++){$num}

realcasescenario
for ($i = 0; $i -le 255; $i++){
    write-host 192.168.0.$i
}

#reading and writing to file
set-Content -path .\example.txt -Value "A String"
Get-Content .\example.txt
cat .\wxample.txt
"a new string" > .\example.txt
"another one" >> .\example.txt
Add-Content -Path .\example.txt -Value "another one what!!"
Add-Content -Path .\example.txt -Value "another another one damn!!!"

'" ODoyle Rules"' > Odoyle-script.ps1 ###how to call a script
.\Odoyle-script.ps1 ### How to run a script


@'
"ODoyle Rules!"
"More Code"
get-service
get-childitem
'@ > Anotherdoyle-script.ps1
.\Anotherdoyle-script.ps1

#HASHTABLES HASHTABLES USE CURLY BRACE, Like Dictionaries 
$mylist = @{First = "JOHN"; Last = "MAMA"; Mid ="T-PAIN" ; Age = 35}
$myList
$myLiSt["last"]
$MyList["first","Mid", "Last"]
$myList.Keys
$myList.Values

$list = @{ element1 = 5; array1 = 1..5; array2 = 6,7,8}
$list
$list.element1
$list.remove("element1")

$kaboom = [ordered] @{ Element1 = "BOOM" ; Element2 = "POW" ; Element3 = "BANG"}

Practical Exercise
$ARRAY = @( &{(Get-Random -Minimum -10 -Maximum 0)..(Get-Random -Minimum 1 -Maximum 20)} )

[array]::Reverse($ARRAY)

$employee1["Username"] = "mhopper001"###how to add a value in a key

$employee1["job"] = "Software Lead" ###how to change a value in key 

$employee3 = @{ First = "Alex" ; Last = "Moran" ; ID = 003 ; Job = "Software Developer"}

$employee1[ "Status" ] = "Management"

$employee2[ "Status" ] = "Intermediate"

$employee3[ "Status" ] = "Entry Level"

$line1 = "Do you have model number: MT5437 for john.doe@sharklasers.com?"
$line2 = "What model number for john.doe@sharklasers.com?"
$modelnum = "MT5437" ###ANS: $PATTERN = '[A-Za-z]{2}[0-9]{4}'
$line1,$line2 | foreach-object |
    if ($_. -match $PATTERN){
        write-host $matches[0]":$_"
    }
    else{ 
        write-host "No we Don't have: $_ in stock"
} 

look into $MATCH


$procs = "notepad", "msedge", "mspaint"
$procs | ForEach-Object { Start-Process $_ }
Get-Process 
foreach ($item in $procs) {Start-Process $item ; Stop-Process -Id (ps $item).Id}  


$procs = "notepad", "msedge", "mspaint"
$procs | ForEach-Object { Start-Process $_ }
Get-Process

foreach($proc in $procs){
    Get-Process | Where-Object{$_.name -like $proc} |
    ForEach-Object{Add-Content $file $_.Id} }

Get-Content .\procs.txt | ForEach-Object{Stop-Process $_ }

$file ="$pwd\procs.txt"
foreach($proc in $procs){
    Get-Process | Where-Object{$_.name -like $proc} | 
    Format-table -Id

foreach($proc in $procs){
    Get-Process | Where-Object{$_.Name -like $Proc } |
    ForEach-Object{Add-Content $file $_.Id } }

Get-Content .\Procs.txt | ForEach-Object{Stop-Process -id $_}
(Get-Process -Name <NAME>).Id

### PS Remoting: remote to a different cosole 

###String Manipulation###
#in order to print quotation marks in string you have to back-tick (`) before the quotes OR cover the command with a single quotes EX: 'text "Quotation Marks"'
$text1 = "One Terabyte is $(1TB / 1GB) Gigabytes"

"Here is another nline of text" ###returns a newline at nline

$text = @"
Here is some text with `"quotes`".
1TB equals $(1TB / 1GB) GB.
Variables are resolved
"$PWD"
"@


"{0:n3}" -f 123.45678 ###INSURES THAT IT WILL GO TO THE THIRD DECIMAL POINT
"{0:d5}" -f 1 ###INSURE THAT THERE ARE FIVE DIGITS SHOWN

Get-Service | Select-Object -First 10 | ForEach-Object{"The Service {0} is call '{1}': {2}" -f $_.name, $_.Displayname, $_.Status}


"Hello John" -replace "John", "World"

'server1,server2,server3' -replace '[,]', ':' ###replace every comma in '' with :

"Hello Johnathon" -replace '[John]', "Toyota"

"this is ipv6" -match 'IPv6'
-match returns true or false if string, the array will turn the index number

use regex cheat sheet for regex
(qprocess) -replace '\s{2,}', ', ' | select -First 10

'192.168.0.1' -replace '\d{1,3}$', '255'

$list = 'comp1', 'comp10', 'comp13'
$pattern = 'comp(\d{1,3})'
$list -replace $pattern, 'computer$1'

$list -replace $pattern, 'computer$1 (This changed from $0)'

$profile -split '\.' ### splits line by period and newlines after split

$profile -split '(?=\.)'### look behind, look ahead not-needed

$profile -csplit '(?<=[a-z])(?=[A-Z])'###csplit is case sensitive split 

"cat","dog" -join ""

$env:username. '@', $env:computername, ".", $env:userdomain -join ""

"powershell is awesome!" -match "\w+(\?|!)"

$Matches[0]

"10.0.0.22" -as [ipaddress] -as [bool]


function test-it { 'Hello World!' ### not persistant you have to save in the environment 
}

function test_me($value) {
    if($value) {
        Write-Host -ForegroundColor Green "True"
    }
    else {
        Write-Host -ForegroundColor Red "False"
}

Function Add-TwoNumbers 
{

Param ([int]$a, [int]$b) ###Doesn't work
        $a + $b
}

function test-me {
    param(
        [Parameter(Mandatory=$true, HelpMessage= 'Enter a name please')]
        $var
    )
    "Your name is $var"
}

Function Convert-ToDollars {
    param(
        [Parameter(Mandatory, HelpMessage='Enter numbers of Euros.')]
        [Double]
        $Euro
    )

    $Dollar = $Euro * 1.4

    }


function check-user {
    [cmdletBinding(DefaultParameterSetName='A')]
    param (
        [Parameter(ParameterSetName='A',Mandatory=$True)]
        $name,

        [Parameter(ParameterSetName='B',Mandatory=$true)]
        $id,

        [Parameter(ParameterSetName='C',Mandatory=$true)]
        $username
    )
    $var = $PSCmdlet.ParameterSetName
    "The $var parameter set was chosen"
}

Function Add-Soldier {
    [CmdletBinding()]
    param(
        {Parameter(Mandatory=$True)][string]$Firstname,
        {Parameter(Mandatory=$True)][string]$Lastname,
        {Parameter(Mandatory=$True)][string]$rank,
        {Parameter(Mandatory=$True)][string]$mos,
    )

}
### another way to comma is <#

how to write files somewhere
Get-Process | Export-csv C:\Users\student\Desktop\getproc


###-ErrorAction SilentlyContinue allows you to not see red 

Get-CimInstance -Query "SELECT * FROM Win32_NetworkAdapterConfiguration WHERE IpEnabled = True"
Get-WhereObject -Query "SELECT * FROM Win32_NetworkAdapterConfiguration WHERE IpEnabled = True"

$CurrentYear = User-input
$CurrentDay = Get-Date
$Jan1 = Get-Date 1/1
Function Get-OrdinalDate {get-date %Y, ((get-date) - (get-date 1/1)).days +1}


Function Triple-Input($input)
{
    $input = Read-Host 'enter a value'
    $input1 = Read-Host 'enter another value'
    $input2 = Read-Host 'enter another another value'
    $result = [int]$input * [int]$input1 * [int]$input2
    return $result
}     
                        

Practical Questions 
Q1
Return $DollarSum = $Var1 + $Var2 + $Var3 + $Var4
Q2
$Content = get-content $file ### to grab a file in variable us Get-Content
foreach ($i in $Content){
    if ($i.StartsWith($line)) {
    return $i
    }
}

Q3
{
return $arr -join ('/') ###to use -join you have to have parentheses on the outside 


}

Q4
{
  return Get-Process | Sort-Object -Property name -Descending ### returns get process sorted by name in descending order
}

Q5
{ 
foreach($i in $arr) {                     ###for each index in $arr check to see if the first index matches key and return to the 9th column, else return -1

    if($i[0] -eq $key){
        return $i[9]
        }
    }
    return -1
}



Q6

Process {
        command <#EX:#> $sum = $var1 + $var2                   ###if it is says PROVIDED ON THE PIPELINE it means its an advanced function
        }




#IF GUNNY TELLS YOU TO RETURN A DATE IN A SPECIFIC FORMAT use UFORMAT

#Custom date w/ -uformat

$fmt = '%Y%m%d'
return Get-Date -UFormat $fmt























Practical Questions 
Question 1 ### returns the value of arguments 
function q1($var1, $var2, $var3, $var4){
return $var1 + $var2 + $var3 + var4
}
Question 2 ### goes through nested arrays and search the first instance of the item matching
function q2($arr, $rows, $cols, $key){
foreach($i in $arr){ 
        if($i[0] -eq $key) {
             return $i[9] {
             }
        }
 }
Question 3 ###
function q3{
$vals = @()
      do {
         $val = read-host
         if($val -ne -1) {
            $vals += $val
         }
     } until($val -eq -1)
     return $($vals | measure-object -Maximum).maximum
}

Question 4 ###changes the filename into a lined # text format
function q4($filename,$whichline) { 
$content = get-content $filename
         return $content[$whichline]
}

Question 5 ### gets the path of $path and sorts by name ascending(default)
function q5($path) {
return get-childitem -path $path | sort-object -Property Name
}

Question 6 ### for each item in $input(read-Host) it adds to sum and returns it
function q6{
$sum = 0
     foreach($a in $input) {
            $sum += $a
            }
            return $sum
}
Question 7  ###returns all commands that have the noun process 
function q7 {
return get-command -noun process
}

Question 8 ### returns a string with the variable $adjective 
function q8($adjective) { 
return "powershell is $adjective"
}

Question 9 ###looks for if the ip address is valid by seeing if any octet is higher than 255 or lower than zero
function q9($addr) {
foreach($octet in $addr.split(".")) {
        if([int]$octet -lt 0 or [int]$octet -gt 255) {
              return $false
              }
       }
      return $true
}
or 
you can also use the [ipaddress] to see if the value equals a ip addr
Question 10 ### gets the hash for $filepath to compare to the last hash with the -ne statement
function q10 ($filepath,$lasthash) {
$hash = get-filehash -Algorithm SHA256 $filepath
        return $hash.Hash -ne $lasthash
}








































































